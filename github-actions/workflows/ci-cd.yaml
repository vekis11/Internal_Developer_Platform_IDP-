name: Simple Development Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality Check
  check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: |
          cd backstage
          yarn install --frozen-lockfile

      - name: Run linting
        run: |
          cd backstage
          yarn lint

      - name: Run TypeScript check
        run: |
          cd backstage
          yarn tsc

      - name: Run unit tests
        run: |
          cd backstage
          yarn test

  # Security Scan with Snyk
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: |
          cd backstage
          yarn install --frozen-lockfile

      - name: Run Snyk security scan
        uses: snyk/actions/node@v1.0.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run Snyk container scan
        uses: snyk/actions/docker@v1.0.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: internal-developer-platform:latest
          args: --severity-threshold=high

      - name: Run Snyk infrastructure scan
        uses: snyk/actions/iac@v1.0.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [check, security-scan]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: |
          cd backstage
          yarn install --frozen-lockfile

      - name: Build Backstage
        run: |
          cd backstage
          yarn build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=dev-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backstage
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Development
  deploy:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.K8S_DEV_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Kubernetes
        run: |
          # Deploy using Helm
          helm upgrade --install backstage ./helm-charts/backstage \
            --namespace backstage \
            --create-namespace \
            --set image.tag=${{ needs.build.outputs.image-tag }} \
            --set postgresql.auth.password=${{ secrets.POSTGRESQL_PASSWORD }} \
            --set redis.auth.password=${{ secrets.REDIS_PASSWORD }}

      - name: Update ArgoCD application
        run: |
          kubectl patch application backstage -n argocd --type='merge' -p='{"spec":{"source":{"helm":{"parameters":[{"name":"image.tag","value":"${{ needs.build.outputs.image-tag }}"}]}}}}'

      - name: Sync ArgoCD application
        run: |
          argocd app sync backstage --prune

  # Notify on completion
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#platform-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always() 
